# -*- sh -*-
# vim: set sw=2

## Print ANSI attribute for some named foreground colors
function ansi_fgcol {
  case $1 in
    red) echo "01;31" ;;
    green) echo "01;32" ;;
    yellow) echo "01;33" ;;
    blue) echo "01;34" ;;
    magenta) echo "01;35" ;;
    cyan) echo "01;36" ;;
    white) echo "01;37" ;;
  esac
}

# Print PS1 ANSI sequence for some named foreground color
function ansi_fgseq {
  echo "\[\033[$(ansi_fgcol $1)m\]"
}

# Print a string for PS1 with colors PS1_COLOR_U, PS1_COLOR_H and PS1_COLOR_W
# Prefix with [vim] if VIMRUNTIME is set
# Prefixes with user name for non-root users
function basicprompt {
  [[ "$(id -u)" != 0 ]] && local p_usr="\u@"
  [[ -n "$VIMRUNTIME" ]] && local p_vim="[vim] "
  if [[ -n "$LS_COLORS" ]]; then
    echo "${p_vim}${PS1_COLOR_U}${p_usr}${PS1_COLOR_H}\h:${PS1_COLOR_W}\w\[\033[00m\]\\$ "
  else
    echo "${p_vim}${p_usr}\h:\w\\$ "
  fi
}

## Detect git/hg/bzr/svn version control and if available
## output printf formatted string of branch to include in PS1.  
## Example: branch "(%s) " 
## Very fast, avoids "bzr nick" and most external commands.
function branch {
  type -t cl_dirname &>/dev/null || alias cl_dirname=dirname
  local dir="$PWD"
  local vcs
  local nick
  while [[ "$dir" != "/" ]]; do
    for vcs in git hg svn bzr; do
      if [[ -d "$dir/.$vcs" ]] && hash "$vcs" &>/dev/null; then
        case "$vcs" in
          git) __git_ps1 "${1:-(%s) }"; return;;
          hg) nick=$(hg branch 2>/dev/null);;
          svn) nick=$(svn info 2>/dev/null\
                | grep -e '^Repository Root:'\
                | sed -e 's#.*/##');;
          bzr)
            local conf="${dir}/.bzr/branch/branch.conf" # normal branch
            [[ -f "$conf" ]] && nick=$(grep -E '^nickname =' $conf | cut -d' ' -f 3)
            conf="${dir}/.bzr/branch/location" # colo/lightweight branch
            [[ -z "$nick" ]] && [[ -f "$conf" ]] && nick="$(basename $(cat $conf))"
            [[ -z "$nick" ]] && nick="$(basename $(readlink -f $dir))";;
        esac
        [[ -n "$nick" ]] && printf "${1:-(%s) }" "$nick"
        return 0
      fi
    done
    dir="$(cl_dirname ${dir})"
  done
}

## Prepend version control branch to prompt
function ps1_vcs {
  export PS1="\$(branch)${1:-$PS1}";
}

## Set PS1 to value from basic_prompt
function ps1_basic { export PS1="$(basicprompt)"; }

# Use ansi_fgseq and basicprompt to set prompt colors from names
function ps1_colors {
  PS1_COLOR_U=$(ansi_fgseq $1)
  PS1_COLOR_H=$(ansi_fgseq $2)
  PS1_COLOR_W=$(ansi_fgseq $3)
  ps1_basic
}

## Prepend time to PS1
function ps1_time { export PS1="[\t] ${1:-$PS1}"; }

## Prepend history number to PS1
function ps1_hist { export PS1="[\!] ${1:-$PS1}"; }

# Set termimal title from parameters
function title { echo -ne "\033]2;$@\007"; }

# Set terminal title from algorithm
function title_long {
  echo -ne "\033]0;${HOSTNAME%%.*}:${PWD/$HOME/~}\007";
}
function title_reverse {
  local wd="${PWD/$HOME/~}";
  local hn="${HOSTNAME%%.*}";
  echo -ne "\033]0;${wd}:${USER:0:1}@${hn}\007";
}

# Set title from PROMPT_COMMAND
function autotitle {
  if [[ $TERM == @(rxvt|xterm) ]]; then
    export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND;} ${1:-title_reverse}";
  fi
}

