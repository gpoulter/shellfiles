# -*- sh -*-

## Print ANSI attribute for some named foreground colors
function ansi_fgcol {
  case $1 in
    red) echo "01;31" ;;
    green) echo "01;32" ;;
    yellow) echo "01;33" ;;
    blue) echo "01;34" ;;
    magenta) echo "01;35" ;;
    cyan) echo "01;36" ;;
    white) echo "01;37" ;;
  esac
}

# Print PS1 ANSI sequence for some named foreground color
function ansi_fgseq {
    echo "\[\033[$(ansi_fgcol $1)m\]"
}

# Print a string for PS1 with colors PS1_COLOR_U, PS1_COLOR_H and PS1_COLOR_W
# Prefix with [vim] if VIMRUNTIME is set
# Prefixes with user name for non-root users
PS1_COLOR_U=$(ansi_fgseq green)
PS1_COLOR_H=$(ansi_fgseq green)
PS1_COLOR_W=$(ansi_fgseq blue)
function basicprompt {
  [[ "$(id -u)" != 0 ]] && local p_usr="\u@"
  [[ -n "$VIMRUNTIME" ]] && local p_vim="[vim] "
  if [[ -n "$LS_COLORS" ]]; then
      echo "${p_vim}${PS1_COLOR_U}${p_usr}${PS1_COLOR_H}\h:${PS1_COLOR_W}\w\[\033[00m\]\\$ "
  else
      echo "${p_vim}${p_usr}\h:\w\\$ "
  fi
}

## Return git/hg/bzr/svn if in a branch, else empty string
## Only returns a vcs if its binary is found in $PATH
function vcs_type {
    type -t cl_dirname &>/dev/null || alias cl_dirname=dirname
    local dir="$PWD"
    local vcs
    while [[ "${dir}" != "/" ]]; do
        for vcs in git hg svn bzr; do
            [[ -d "${dir}/.${vcs}" ]] && hash $vcs &>/dev/null && { echo $vcs; return 0; }
        done
        dir="$(cl_dirname ${dir})"
    done
}

## Detect version control branch setting BRANCH_DIR, BRANCH_NAME, BRANCH_PROMPT
## Very fast except for calling "bzr nick" on cd into a Bazaar branch
function set_branch {
    case $(vcs_type) in
        git) BRANCH_NAME="$(git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/\* //')";;
        hg) BRANCH_NAME="$(hg branch 2>/dev/null)";;
        svn) BRANCH_NAME="$(svn info 2>/dev/null | grep -e '^Repository Root:' | sed -e 's#.*/##')";;
        bzr) [[ $PWD != $BRANCH_DIR ]] && BRANCH_NAME="$(bzr nick 2>/dev/null)";;
        *) BRANCH_NAME="";;
    esac
    BRANCH_DIR="$PWD"
    BRANCH_PROMPT=""
    [[ -n "$BRANCH_NAME" ]] && BRANCH_PROMPT="[$BRANCH_NAME] "
}

## Prepend version control branch to prompt
function ps1_vcs { 
    export PROMPT_COMMAND="${PROMPT_COMMAND:-true}; set_branch"
    export PS1="\${BRANCH_PROMPT}${1:-$PS1}"; 
}

## Set PS1 to value from basic_prompt
function ps1_basic { export PS1="$(basicprompt)"; }

## Prepend time to PS1
function ps1_time { export PS1="[\t] ${1:-$PS1}"; }

## Prepend history number to PS1
function ps1_hist { export PS1="[\!] ${1:-$PS1}"; }

# Set termimal title from parameters
function title { echo -ne "\033]2;$@\007"; }

# Set terminal title from algorithm
function title_long {
    echo -ne "\033]0;${HOSTNAME%%.*}:${PWD/$HOME/~}\007";
} 
function title_reverse {
    local wd="${PWD/$HOME/~}";
    local hn="${HOSTNAME%%.*}";
    hn="${hn##*-}";
    echo -ne "\033]0;${wd}:${USER:0:1}@${hn:0:4}\007";
} 

# Set title from PROMPT_COMMAND
function autotitle {
    if [[ $TERM == @(rxvt|xterm) ]]; then
        export PROMPT_COMMAND="${PROMPT_COMMAND:-true}; ${1:-title_reverse}";
    fi
}

